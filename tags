!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Action	src/QED2dHMC.jl	/^function Action(U, prm::LattParm, kprm::KernelParm)$/;"	f
CG	src/QED2dSolver.jl	/^function CG(so, U, si, am0, maxiter, eps, A, prm::LattParm, kprm::KernelParm)$/;"	f
CGmaxiter	main/loadtest.jl	/^CGmaxiter = 10000$/;"	v
CGtol	main/loadtest.jl	/^CGtol = 0.000000001$/;"	v
Deps	tests/fermion_forcetest.jl	/^Deps = 0.0001$/;"	v
Deps	tests/gauge_forcetest.jl	/^Deps = 0.0001$/;"	v
F	main/davtest.jl	/^F = CUDA.zeros(ComplexF64,prm.iL[1], prm.iL[2], 2)$/;"	v
F	tests/fermion_forcetest.jl	/^F = CUDA.zeros(ComplexF64, prm.iL[1], prm.iL[2], 2)$/;"	v
F	tests/fermion_forcetest.jl	/^F = similar(U)$/;"	v
F	tests/gauge_forcetest.jl	/^F = similar(U)$/;"	v
F_h	tests/fermion_forcetest.jl	/^F_h = zeros(Float64, prm.iL[1], prm.iL[2], 2)$/;"	v
F_h	tests/gauge_forcetest.jl	/^F_h = zeros(Float64, prm.iL[1], prm.iL[2], 2)$/;"	v
F_i	tests/fermion_forcetest.jl	/^F_i = F_h[1,10,2]$/;"	v
F_i	tests/gauge_forcetest.jl	/^F_i = F_h[1,10,2]$/;"	v
F_num	tests/fermion_forcetest.jl	/^F_num = (Sfin - Sini)\/Deps$/;"	v
F_num	tests/gauge_forcetest.jl	/^F_num = (Sfin - Sini)\/Deps$/;"	v
HMC!	src/QED2dHMC.jl	/^function HMC!(U, am0, eps, ns, acc, CGmaxiter, tol, prm::LattParm, kprm::KernelParm; qzero = false)$/;"	f
HMC!	src/QED2dHMC.jl	/^function HMC!(U, eps, ns, acc, prm::LattParm, kprm::KernelParm; qzero = false)$/;"	f
Hamiltonian	src/QED2dHMC.jl	/^function Hamiltonian(mom, U, prm::LattParm, kprm::KernelParm)$/;"	f
KernelParm	src/QED2d.jl	/^struct KernelParm$/;"	f
LattParm	src/QED2d.jl	/^struct LattParm$/;"	f
OMF4!	src/QED2dHMC.jl	/^function OMF4!(mom, U, X, F, g5DX, am0, eps, ns, maxiter, tol, prm::LattParm, kprm::KernelParm)$/;"	f
OMF4!	src/QED2dHMC.jl	/^function OMF4!(mom, U, eps, ns, prm::LattParm, kprm::KernelParm)$/;"	f
Plaquette	src/QED2dHMC.jl	/^function Plaquette(U, prm::LattParm, kprm::KernelParm)$/;"	f
QED2d	src/QED2d.jl	/^module QED2d$/;"	f
Qtop	src/QED2dHMC.jl	/^function Qtop(U, prm::LattParm, kprm::KernelParm)$/;"	f
Sfin	tests/fermion_forcetest.jl	/^Sfin = Action(U2, prm, kprm)$/;"	v
Sfin	tests/gauge_forcetest.jl	/^Sfin = Action(U2, prm, kprm)$/;"	v
Sini	tests/fermion_forcetest.jl	/^Sini = CUDA.dot(X,X) + Action(U, prm, kprm)$/;"	v
Sini	tests/gauge_forcetest.jl	/^Sini = Action(U, prm, kprm)$/;"	v
U	main/MC.jl	/^U   = CUDA.ones(ComplexF64, lsize[1], lsize[2], 2)    $/;"	v
U	main/davtest.jl	/^U = CUDA.ones(ComplexF64, prm.iL[1], prm.iL[2], 2)$/;"	v
U	main/loadtest.jl	/^U = CUDA.ones(ComplexF64, prm.iL[1], prm.iL[2], 2)$/;"	v
U	main/master_field.jl	/^U   = CUDA.ones(ComplexF64, l1, l2, 2)    $/;"	v
U	main/test.jl	/^U = CUDA.ones(ComplexF64, prm.iL[1], prm.iL[2], 2)$/;"	v
U	tests/fermion_forcetest.jl	/^U = CUDA.ones(ComplexF64, prm.iL[1], prm.iL[2], 2)$/;"	v
U	tests/gauge_forcetest.jl	/^U = CUDA.ones(ComplexF64, prm.iL[1], prm.iL[2], 2)$/;"	v
U2	tests/fermion_forcetest.jl	/^U2 = similar(U)$/;"	v
U2	tests/gauge_forcetest.jl	/^U2 = similar(U)$/;"	v
U2_h	tests/fermion_forcetest.jl	/^U2_h = ones(ComplexF64, prm.iL[1], prm.iL[2], 2)$/;"	v
U2_h	tests/gauge_forcetest.jl	/^U2_h = ones(ComplexF64, prm.iL[1], prm.iL[2], 2)$/;"	v
X	main/davtest.jl	/^X = (CUDA.randn(Float64, prm.iL[1], prm.iL[2], 2) .+ CUDA.randn(Float64, prm.iL[1], prm.iL[2], 2)im)\/sqrt(2)$/;"	v
X	tests/fermion_forcetest.jl	/^X = (CUDA.randn(Float64, prm.iL[1], prm.iL[2], 2) .+ CUDA.randn(Float64, prm.iL[1], prm.iL[2], 2)im)\/sqrt(2)$/;"	v
acc	main/MC.jl	/^acc = Vector{Int64}()$/;"	v
acc	main/loadtest.jl	/^acc = Vector{Int64}()$/;"	v
acc	main/master_field.jl	/^acc = Vector{Int64}()$/;"	v
acc	main/test.jl	/^acc = Vector{Int64}()$/;"	v
am0	main/davtest.jl	/^am0 = 0.0$/;"	v
am0	main/loadtest.jl	/^am0 = 0.01$/;"	v
am0	tests/fermion_forcetest.jl	/^am0 = 0.01$/;"	v
am0	tests/gauge_forcetest.jl	/^am0 = 0.01$/;"	v
eps	main/loadtest.jl	/^eps = 0.001$/;"	v
eps	main/test.jl	/^eps = 0.005$/;"	v
err_avg	main/MC.jl	/^function err_avg(dfoo)$/;"	f
err_avg	main/master_field.jl	/^function err_avg(dfoo)$/;"	f
eta	tests/fermion_forcetest.jl	/^eta = similar(X)$/;"	v
file	main/loadtest.jl	/^file = "statistics.txt"$/;"	v
file	tests/fermion_forcetest.jl	/^file = "statistics.txt"$/;"	v
file	tests/gauge_forcetest.jl	/^file = "statistics.txt"$/;"	v
frc	tests/fermion_forcetest.jl	/^frc = CUDA.zeros(Float64, prm.iL[1], prm.iL[2], 2)$/;"	v
frc1	tests/fermion_forcetest.jl	/^frc1 = CUDA.zeros(Float64, prm.iL[1], prm.iL[2], 2)$/;"	v
frc1	tests/gauge_forcetest.jl	/^frc1 = CUDA.zeros(Float64, prm.iL[1], prm.iL[2], 2)$/;"	v
frc2	tests/fermion_forcetest.jl	/^frc2 = CUDA.zeros(Float64, prm.iL[1], prm.iL[2], 2)$/;"	v
frc2	tests/gauge_forcetest.jl	/^frc2 = CUDA.zeros(Float64, prm.iL[1], prm.iL[2], 2)$/;"	v
g5DX	tests/fermion_forcetest.jl	/^g5DX = CUDA.zeros(ComplexF64, prm.iL[1], prm.iL[2], 2)$/;"	v
gamm5Dw	src/QED2dDirac.jl	/^function gamm5Dw(so, U, si, am0, prm::LattParm)$/;"	f
gamm5Dw_sqr	src/QED2dDirac.jl	/^function gamm5Dw_sqr(so, U, si, am0::Float64, prm::LattParm, kprm::KernelParm)$/;"	f
gamm5Dw_sqr_msq	src/QED2dDirac.jl	/^function gamm5Dw_sqr_msq(so, tmp, U, si, am0::Float64, prm::LattParm, kprm::KernelParm)$/;"	f
infile	main/MC.jl	/^infile = parsed_args["i"]$/;"	v
infile	main/master_field.jl	/^infile = parsed_args["i"]$/;"	v
io	main/test.jl	/^io = open("log.txt", "w+")$/;"	v
kprm	main/davtest.jl	/^kprm = KernelParm((50, 1), (1,50))$/;"	v
kprm	main/loadtest.jl	/^kprm = KernelParm((50, 1), (1,50))$/;"	v
kprm	main/test.jl	/^kprm = KernelParm((90, 1), (1,90))$/;"	v
kprm	tests/fermion_forcetest.jl	/^kprm = KernelParm((50, 1), (1,50))$/;"	v
kprm	tests/gauge_forcetest.jl	/^kprm = KernelParm((50, 1), (1,50))$/;"	v
krnl_force!	src/QED2dAction.jl	/^function krnl_force!(frc1, frc2, U, prm::LattParm)$/;"	f
krnl_reflect!	src/QED2dFields.jl	/^function krnl_reflect!(Uout, Uin, l1old, l2old)$/;"	f
krnl_unfold!	src/QED2dFields.jl	/^function krnl_unfold!(Uout, Uin, l1old, l2old)$/;"	f
leapfrog!	src/QED2dHMC.jl	/^function leapfrog!(mom, U, X, F, g5DX, am0, eps, ns, CGmaxiter, tol, prm::LattParm, kprm::KernelParm)$/;"	f
load_gauge	src/QED2dLoadSave.jl	/^function load_gauge(U, file::String, prm::LattParm)$/;"	f
mom	main/test.jl	/^mom = CUDA.zeros(Float64,  prm.iL[1], prm.iL[2], 2)$/;"	v
ns	main/loadtest.jl	/^ns  = 100$/;"	v
ns	main/test.jl	/^ns  = 100$/;"	v
parse_commandline	main/MC.jl	/^function parse_commandline()$/;"	f
parse_commandline	main/master_field.jl	/^function parse_commandline()$/;"	f
parsed_args	main/MC.jl	/^parsed_args = parse_commandline()$/;"	v
parsed_args	main/master_field.jl	/^parsed_args = parse_commandline()$/;"	v
pl	main/MC.jl	/^pl  = Vector{Float64}(undef, nt)$/;"	v
plaquette!	src/QED2dAction.jl	/^function plaquette!(plx, U, prm::LattParm)$/;"	f
prm	main/davtest.jl	/^prm  = LattParm((50,50), 5.0)$/;"	v
prm	main/loadtest.jl	/^prm  = LattParm((50,50), 6.05)$/;"	v
prm	main/test.jl	/^prm  = LattParm((90,90), 1.0)$/;"	v
prm	tests/fermion_forcetest.jl	/^prm  = LattParm((50,50), 6.05)$/;"	v
prm	tests/gauge_forcetest.jl	/^prm  = LattParm((50,50), 6.05)$/;"	v
qt	main/MC.jl	/^qt  = Vector{Float64}(undef, nt)$/;"	v
qtop!	src/QED2dAction.jl	/^function qtop!(plx, U, prm::LattParm)$/;"	f
read_from	main/loadtest.jl	/^read_from = 193$/;"	v
read_from	tests/fermion_forcetest.jl	/^read_from = 193$/;"	v
read_from	tests/gauge_forcetest.jl	/^read_from = 193$/;"	v
read_options	main/MC.jl	/^function read_options(fname)$/;"	f
read_options	main/master_field.jl	/^function read_options(fname)$/;"	f
save_gauge	src/QED2dLoadSave.jl	/^function save_gauge(U, file::String, prm::LattParm)$/;"	f
save_msm	main/master_field.jl	/^function save_msm(fb, U, prm, kprm)$/;"	f
set_kernel_parameters	main/MC.jl	/^function set_kernel_parameters(l1, l2)$/;"	f
set_kernel_parameters	main/master_field.jl	/^function set_kernel_parameters(l1, l2)$/;"	f
threads	main/davtest.jl	/^CUDA.@cuda threads=kprm.threads blocks=kprm.blocks gamm5Dw(F, U, X, am0, prm)$/;"	v
tr_dQwdU	src/QED2dDirac.jl	/^function tr_dQwdU(frc, U, X, g5DwX, prm::LattParm)$/;"	f
unfold_fld!	src/QED2dFields.jl	/^function unfold_fld!(Uin, prm::LattParm, kprm::KernelParm)$/;"	f
unfold_reflect!	src/QED2dFields.jl	/^function unfold_reflect!(Uin, prm::LattParm, kprm::KernelParm)$/;"	f
update_momenta!	src/QED2dHMC.jl	/^function update_momenta!(mom, U, X, F, g5DX, am0, eps, ns, maxiter, tol, prm::LattParm, kprm::KernelParm)$/;"	f
updt_fld!	src/QED2dAction.jl	/^function updt_fld!(U, mom, eps)$/;"	f
